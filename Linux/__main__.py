import sys
import Config
import asyncio
from telegram import Update
from Graph import Clean_Stage
from importlib import import_module
from pyrogram import idle as PyGram
from hydrogram import idle as HyGram
from Linux.Modules import ALL_MODULES
from telegram.ext import ContextTypes
from Linux import App, Sakura, LOGGER, pyApp
from telegram.error import (
    BadRequest, ChatMigrated, Forbidden, NetworkError, TelegramError, TimedOut
)

async def addPackages():
    await App.start()
    await Sakura.start()
    for nodes in ALL_MODULES:
        import_module("Linux.Modules." + nodes)
    LOGGER.info("¬ª S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è …™·¥ç·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥Ä ü ü ·¥ç·¥è·¥Ö·¥ú ü·¥ás ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥ò ü·¥è è·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è !")
    try:
        Resocs = await Clean_Stage()
        if Resocs:
            await App.edit_message_text(
                Resocs["chat_id"],
                Resocs["message_id"],
                "**üîÆ L…™…¥·¥úx…™·¥Ö·¥á R·¥ás·¥õ·¥Ä Ä·¥õ·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è !**"
            )
        else:
            await App.send_message(Config.SUPPORT, "**üîÆ L…™…¥·¥úx…™·¥Ö·¥á C ü·¥è·¥ú·¥Ö S·¥á Ä·¥†·¥á Ä S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö !**")
    except Exception:
        LOGGER.info("¬ª B·¥è·¥õ  ú·¥Äs “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ ú·¥á s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò. ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥Ä·¥Ö·¥Ö·¥á·¥Ö  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥õ·¥è  è·¥è·¥ú Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò.")
      
    await PyGram()
    await HyGram()
    await App.send_message(SUPPORT, "**üöß M·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á M·¥è·¥Ö·¥á O…¥ ! L…™…¥·¥úx…™·¥Ö·¥á Is N·¥è·¥° D·¥á·¥Ä·¥Ö.**")
    LOGGER.info("¬ª G·¥è·¥è·¥Ö B è·¥á S·¥õ·¥è·¥ò·¥ò…™…¥…¢ L…™…¥·¥úx…™·¥Ö·¥á !")

async def error_SysFunc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error = context.error
    try:
        raise error
    except Forbidden:
        LOGGER.info("¬ª N·¥è…¥·¥á ! C·¥ú Ä Ä·¥á…¥·¥õ T·¥ás·¥õ O…¥…¢·¥è…™…¥…¢ ·¥†1.")
        LOGGER.info(error)
        #  Ä·¥á·¥ç·¥è·¥†·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á.·¥Ñ ú·¥Ä·¥õ_…™·¥Ö “ì Ä·¥è·¥ç ·¥Ñ·¥è…¥·¥†·¥á Äs·¥Ä·¥õ…™·¥è…¥  ü…™s·¥õ
    except BadRequest:
        LOGGER.info("¬ª N·¥è…¥·¥á ! C·¥ú Ä Ä·¥á…¥·¥õ T·¥ás·¥õ O…¥…¢·¥è…™…¥…¢ ·¥†2.")
        LOGGER.info("¬ª B·¥Ä·¥Ö Ä·¥á«´·¥ú·¥ás·¥õ C·¥Ä·¥ú…¢ ú·¥õ !")
        LOGGER.info(error)
        #  ú·¥Ä…¥·¥Ö ü·¥á ·¥ç·¥Ä ü“ì·¥è Ä·¥ç·¥á·¥Ö  Ä·¥á«´·¥ú·¥ás·¥õs -  Ä·¥á·¥Ä·¥Ö ·¥ç·¥è Ä·¥á  ô·¥á ü·¥è·¥° !
    except TimedOut:
        LOGGER.info("¬ª N·¥è…¥·¥á ! C·¥ú Ä Ä·¥á…¥·¥õ T·¥ás·¥õ O…¥…¢·¥è…™…¥…¢ ·¥†3.")
        #  ú·¥Ä…¥·¥Ö ü·¥á s ü·¥è·¥° ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥ò Ä·¥è ô ü·¥á·¥çs
    except NetworkError:
        LOGGER.info("¬ª N·¥è…¥·¥á ! C·¥ú Ä Ä·¥á…¥·¥õ T·¥ás·¥õ O…¥…¢·¥è…™…¥…¢ ·¥†4.")
        #  ú·¥Ä…¥·¥Ö ü·¥á ·¥è·¥õ ú·¥á Ä ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥ò Ä·¥è ô ü·¥á·¥çs
    except ChatMigrated as eorr:
        LOGGER.info("¬ª N·¥è…¥·¥á ! C·¥ú Ä Ä·¥á…¥·¥õ T·¥ás·¥õ O…¥…¢·¥è…™…¥…¢ ·¥†5.")
        LOGGER.info(eorr)
        # ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ_…™·¥Ö ·¥è“ì ·¥Ä …¢ Ä·¥è·¥ú·¥ò  ú·¥Äs ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥ús·¥á ·¥á.…¥·¥á·¥°_·¥Ñ ú·¥Ä·¥õ_…™·¥Ö …™…¥s·¥õ·¥á·¥Ä·¥Ö
    except TelegramError:
        LOGGER.info(error)
        #  ú·¥Ä…¥·¥Ö ü·¥á ·¥Ä ü ü ·¥è·¥õ ú·¥á Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç  Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö ·¥á Ä Ä·¥è Äs

def superPy_Run() -> None:
    LOGGER.info("¬ª P è·¥õ ú·¥è…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç  ô·¥è·¥õ ·¥Ñ ü…™·¥á…¥·¥õ  ü·¥Ä è·¥á Ä s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö !")
    pyApp.add_error_handler(error_SysFunc)
    pyApp.run_polling(timeout=15, drop_pending_updates=True, allowed_updates=Update.MESSAGE)

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(addPackages())
    superPy_Run()
    LOGGER.info("¬ª L…™…¥·¥úx…™·¥Ö·¥á s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö !")
